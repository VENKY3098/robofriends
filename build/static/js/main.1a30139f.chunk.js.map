{"version":3,"sources":["Card.js","CardList.js","robots.js","scroll.js","searchbox.js","app.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","src","alt","CardList","robots","map","user","i","key","scroll","props","style","overflow","border","height","children","searchbox","searchChange","searchfeild","type","placeholder","onChange","app","onsearchchange","event","setState","target","value","state","fetch","then","response","json","users","filterrobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAYeA,EAXH,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAKC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,GAAgB,EAAbC,SACxB,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,UAAsCI,IAAI,WAClD,6BACI,4BAAKN,GACL,qCAAWC,MCcZM,EAnBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACAC,IAAKJ,EAAOG,GAAGT,GACfA,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,MACjBE,SAAUK,EAAOG,GAAGR,gBCb/BK,EAAS,CACpB,CACEN,GAAI,EACJF,KAAM,sBACNG,SAAU,iBACVF,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,eACNG,SAAU,aACVF,MAAO,iBAET,CACEC,GAAI,EACJF,KAAM,wBACNG,SAAU,iBACVF,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,mBACNG,SAAU,WACVF,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,cACNG,SAAU,aACVF,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,6BACNG,SAAU,aACVF,MAAO,iBAET,CACEC,GAAI,EACJF,KAAM,kBACNG,SAAU,eACVF,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNG,SAAU,gBACVF,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNG,SAAU,WACVF,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNG,SAAU,iBACVF,MAAO,2BClDIY,EAPF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC1DJ,EAAMK,WCSJC,EAZC,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,aAA4B,EAAfC,YAC3B,OACI,yBAAKlB,UAAU,OACf,2BACAA,UAAU,sCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCiCHK,E,kDAnCX,aAAc,IAAD,8BACT,gBAWJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACP,YAAaM,EAAME,OAAOC,SAXzC,EAAKC,MAAM,CACPxB,OAAQ,GACRc,YAAa,IAJR,E,gEAOO,IAAD,OACfW,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAKhC,IAAD,OACEC,EAAaC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAChC,GACzC,OAAOA,EAAOR,KAAKyC,cAAcC,SAAS,EAAKV,MAAMV,YAAYmB,kBAErE,OAAmB,IAAhBjC,EAAOmC,OACC,0CAIX,yBAAKvC,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWiB,aAAckB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWnB,OAAQ8B,U,GA7BbM,a,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1a30139f.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card =({name,email,id,username}) =>{\r\n    return(\r\n        <div className='bg-light-red dib br-pill pa2 ma3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?50x50`} alt='robots'/>\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <p>EMAIL->{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList=({robots})=>{\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i)=>{\r\n                    return(\r\n                        <Card \r\n                        key={robots[i].id}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                        username={robots[i].username}\r\n                        />\r\n                    );\r\n                })\r\n            }    \r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'ANNAPURNA GARIMELLA',\n    username: 'ANNAPURNA_JUNE',\n    email: 'annapurna@june.biz'\n  },\n  {\n    id: 2,\n    name: 'G R N SASTRY',\n    username: 'SASTRY_NOV',\n    email: 'Sastry@nov.tv'\n  },\n  {\n    id: 3,\n    name: 'VIJAYALASKHMI TENNETI',\n    username: 'VIJAYA_TENNETI',\n    email: 'vijaya.tenneti@gmail.com'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chinnadhana',\n    username: 'pichidhana',\n    email: 'pichipilla@bokaro.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Anjali Tenneti Gaurav',\n    username: 'anj_venkat',\n    email: 'anj@july.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst scroll=(props)=>{\r\n    return(\r\n        <div style={{overflow:'scroll',border:'2px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default scroll;\r\n","import React from 'react';\r\n\r\nconst searchbox=({searchChange,searchfeild})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input  \r\n        className='pa3 ba b--black br-pill bg-mid-gray' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\nexport default searchbox;","import React,{Component}from 'react';\r\nimport CardList1 from './CardList';\r\nimport {robots} from './robots';\r\nimport Scroll from './scroll';\r\nimport Searchbox from './searchbox';\r\n\r\nclass app extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfeild: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({robots: users}))\r\n    }\r\n    onsearchchange=(event)=>{\r\n        this.setState({searchfeild: event.target.value})\r\n    }\r\n    render(){\r\n        const filterrobots=this.state.robots.filter((robots) =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfeild.toLowerCase());\r\n        })\r\n        if(robots.length===0){\r\n            return <h1>loading...</h1>\r\n        }\r\n        else{\r\n    return(\r\n        <div className='tc'>\r\n        <h1>ROBOFRIENDS</h1>\r\n        <Searchbox searchChange={this.onsearchchange}/>\r\n        <Scroll>\r\n            <CardList1 robots={filterrobots}/>\r\n        </Scroll>\r\n        </div>\r\n    );\r\n        }\r\n}}\r\n\r\nexport default app;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport 'tachyons';\n//import {robots} from'./robots';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}